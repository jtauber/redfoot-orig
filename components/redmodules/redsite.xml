<!-- -*- mode: python-*- -->
<red:code xmlns:red="http://redfoot.sourceforge.net/2001/06/">

  from string import split
  from redfoot.version import VERSION

  from redfoot.rdf.const import COMMENT
  from redfoot.rdf.objects import resource, literal  
  from redfoot.rdf.query.builders import ListBuilder
  from redfoot.rdf.query.functors import o
  from redfoot.rdf.query.functors import filter
  

  from redfoot.module import ParentModule

  from redfoot.util import encode_URI

  SITE_NAME = resource('http://redfoot.sourceforge.net/2001/09/site/name')
  SITE_DESCRIPTION = resource('http://redfoot.sourceforge.net/2001/09/site/description')
  SITE_KEYWORDS = resource('http://redfoot.sourceforge.net/2001/09/site/keywords')
  BACKGROUND = resource('http://redfoot.sourceforge.net/2001/09/site/background')
  LINK_COLOR = resource('http://redfoot.sourceforge.net/2001/09/site/link_color')
  LINK_HOVER = resource('http://redfoot.sourceforge.net/2001/09/site/link_hover')
  HTML = resource('http://redfoot.sourceforge.net/2001/09/site/html')
  LINKS_TO = resource('http://redfoot.sourceforge.net/2001/09/site/links_to')
  LIST_LINK = resource('http://redfoot.sourceforge.net/2001/09/site/list_link')

  PROCESSOR = resource('http://redfoot.sourceforge.net/2001/10/18/processor')

  SITE_PAGE = resource('http://redfoot.info/2001/10/22/site_page')
  VISIBLE_TO = resource('http://redfoot.info/2001/10/22/visible_to')  
  ANONYMOUS = resource('http://redfoot.info/2001/10/22/anonymous')
  IS_MEMBER_OF = resource('http://redfoot.info/2001/10/22/is_member_of')
  GROUP = resource('http://redfoot.info/2001/10/22/Group')
  SUB_GROUP_OF = resource('http://redfoot.info/2001/10/22/sub_group_of')
  SUPER_USER = resource('http://redfoot.info/2001/10/22/super_user')

  <red:module name="RedSite">

    <red:sub-module instance="authentication" 
                    class="Authentication" 
                    from="redmodules.authentication"/>

    <!-- Used for editing the redsite schema in redsite.rdf -->
    <red:sub-module instance="generic"
                    class="Generic"
                    from="redmodules.generic"/>

    def __init__(self, app):
        from redfoot.module import ParentModule
        ParentModule.__init__(self, app)

        self.rednode = self.create_rednode()
        self.generic.set_rednode(self.rednode)
        self.app.rednode.neighbours.add_store(self.rednode.local)


    def handle_request(self, request, response):
        uri = request.get_parameter('processor', None)
        if uri:
            processor = self.app.rednode.get_first_value(resource(uri), PROCESSOR, None)
            if processor:
                import sys
                globals = sys.modules[self.app.__class__.__module__].__dict__
                locals = self.app.__class__.__dict__
                processor = str(processor)

                # TODO: Where to do this properly
                processor = processor.replace('\r\n', '\n')

                lines = processor.split("\n")
                codestr = "def _RF_Processor(self, request, response):\n"
                for line in lines:
                    codestr = codestr + "    " + line + "\n"
                print codestr
                exec codestr+"\n" in globals, locals
                # setsttr(self, uri, _RF_Processor)
                self.app._RF_Processor(request, response)
        ParentModule.handle_request(self, request, response)


    def stop(self):
        self.authentication.stop()
        print "saving %s" % self.rednode.local.location
        self.rednode.local.save()

    def alpha_by_label(self, s1, s2):
        label_a = self.app.rednode.label(s1)
        label_b = self.app.rednode.label(s2)
        return cmp(str(label_a), str(label_b))

    def visible(self, uri):
        identity = self.authentication.get_identity() or ANONYMOUS
        def is_member_of(group, self=self, identity=identity):
            if self.app.rednode.exists(identity, IS_MEMBER_OF, group):
                return 1
                
        if self.app.rednode.visit(o(is_member_of), (uri, VISIBLE_TO, None))==1:
            return 1
        else:
            if is_member_of(SUPER_USER):
                return 1
            else:
                return 0

    <red:facet name="/" args="uri=None">
      <red:exec>
        parts = split(self.app.request.get_path_info(), '/')
        depth = len(parts)-2
        parts = parts[1:-1]
        self.depth = depth
      </red:exec>
    <red:exec>
      uri = uri or resource(self.app.request.get_parameter('uri', None))
      uri = uri or resource(self.app.rednode.uri+self.app.request.get_path_info()[1:])
    </red:exec>
      
    
&lt;!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "DTD/xhtml1-strict.dtd"&gt;

<!-- TODO: we should not have to do this -->
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
        <head>
          <title><red:eval>self.app.rednode.get_first_value(resource(self.app.rednode.uri), SITE_NAME, 'Home')</red:eval></title>
          <meta name="description"
                content="{self.app.rednode.get_first_value(resource(self.app.rednode.uri), SITE_DESCRIPTION, '')}"/>
          <meta name="keywords"
                content="{self.app.rednode.get_first_value(resource(self.app.rednode.uri), SITE_KEYWORDS, '')}"/>
          <link rel="STYLESHEET" 
                type="text/css" 
                href="{'../' * depth}2002/css"/>
        </head>
        <body>
<div class="topnav">
  [<a href="{self.app.rednode.uri}">
     <red:eval>self.app.rednode.get_first_value(resource(self.app.rednode.uri), SITE_NAME, 'Home')</red:eval>
   </a>
   <red:for item="p" list="parts">
     <red:if test="p!=''">
      <red:exec>
        depth = depth - 1
        path = '../' * depth
      </red:exec>
      |
      <a href="{path}">
        <red:eval>p</red:eval>
      </a>
     </red:if>
   </red:for>
  ]
</div>

<h1><red:eval>self.app.rednode.label(uri, '')</red:eval></h1>

<form id="login" action="" method="post"
      style="margin: 0px; padding: 0px;">
  <input name="view" type="hidden" value=""/>
  <input name="processor" type="hidden" value=""/>  
</form>    

<div style="float: left;">

  <div class="nav" style="float: right; clear: right; width: 10em; border: solid 1px black; padding: 2px 5px; font-size: 8pt;">
     <red:if test="self.authentication.authenticated()">
       Welcome, <red:eval>self.authentication.get_username()</red:eval>
     </red:if>

  <dl>
  <dt>Actions</dt>
                    <red:if test="self.authentication.authenticated()">
            <!--
              TODO: remove editor location assumption;
                    Related: Maybe change the uri's to editor resource
                    to something along the lines of
                    uri?view_with=editor_uri
              -->
            <dd><a href="{self.app.rednode.get_first_value(resource(self.app.rednode.uri), 'TODO: EDITOR', '/editor/')}edit_subject?subject={encode_URI(self.app.rednode.uri+self.app.request.get_path_info()[1:])}">Edit this page</a></dd>
                      
                      <!--
                        This module instance does not directly contain
                        the processors
                        <input name='module_instance' 
                             type='HIDDEN' 
                             value="{self.module_instance}"/>
                        -->

                     <dd><a href="javascript: form=document.getElementById('login'); form.processor.value='do_logout'; form.submit()">Logout
                      </a></dd>


                      <red:else>             
                        <dd><a href="javascript: form=document.getElementById('login'); form.view.value='login';form.submit()">
                        Login</a> </dd>
                        <dd><a href="javascript: form=document.getElementById('login'); form.view.value='create';form.submit()">
                          Create User 
                        </a> </dd>
                      </red:else>

                    </red:if>
        </dl>            

      <red:exec>
        lb = ListBuilder()
        self.app.rednode.visit(o(filter(lb.accept, self.visible)), (uri, LINKS_TO, None))        
        links = lb.list
        links.sort(self.alpha_by_label)
        last = len(links) - 1
      </red:exec>
      <red:if test="len(links)>0">
        <dl>
        <dt>Links</dt>
      <red:for item="index" list="xrange(len(links))">
        <dd><a href="{links[index]}"><red:eval>self.app.rednode.label(links[index])</red:eval></a></dd>
<!--        <red:if test="index!=last">
            |
        </red:if>-->
      </red:for>
        </dl>
      </red:if>

  </div>


      <!-- menu -->
      <red:if test="self.authentication.authenticated()">
          <red:exec>self._body(uri)</red:exec>
        <red:else>
          <red:exec>view = self.app.request.get_parameter('view', None)</red:exec>
          <red:if test="view=='login'">
            <h1>User</h1>
            <red:eval>self.login()</red:eval>

           <red:elif test="view=='create'">
              <h1>User</h1>           
              <red:eval>self.create()</red:eval>
           </red:elif>
           
           <red:else>
             <red:exec>self._body(uri)</red:exec>
           </red:else>          
          </red:if>

        </red:else>
      </red:if>


<!--
          <h1>&#160;</h1>
          <red:exec>self.app.apply()</red:exec>          
-->


</div>



            <div style="font-size: 8pt; text-align: center; margin: 5px;">
              This site is running on <a href="http://redfoot.sourceforge.net/">Redfoot <red:eval>VERSION</red:eval></a> |
              <a href="http://redfoot.sourceforge.net/doc/versions.html">Redfoot Version Conventions</a> 
            </div>
            <div style="text-align: center;">
    <a href="http://validator.w3.org/check/referer"><img
        src="http://www.w3.org/Icons/valid-xhtml10" style="border: 0; vertical-align: middle;"
        alt="Valid XHTML 1.0!" height="31" width="88" /></a>

            </div>  


            
        </body>
&lt;/html&gt;
    </red:facet>

    <red:facet name="/2002/css">

BODY {
  margin: 6% 10%;
}

A {
  color: #000;
  text-decoration: none;
  font-weight: bold;
}

DIV.nav DL {
  margin: 0.5em 0em;
}
DIV.nav DT {
  font-size: 10pt;
  font-weight: bold;
}
DIV.nav DD {
  margin-left: 2em;
}
DIV.nav A {
  font-weight: normal;
}

DIV.topnav {
  position: absolute;
  top: 0em;
  font-size: 8pt;
  color: #999;
}

DIV.topnav A {
  color: #999;
}

    </red:facet>
    
    <red:facet name="/css">    

body {
  color: #000;
  background: #FFF;
  margin:      0px;
  font-family: "Trebuchet MS", sans-serif;
  font-size:   10pt;
}

h1 {
  font-family: "Trebuchet MS", sans-serif;
  background:  <red:eval>self.app.rednode.get_first_value(resource(self.app.rednode.uri), BACKGROUND, "#900")</red:eval>;
  font-weight: normal;
  color:       #FFF;
  padding:     0px 10px;
  margin:      0px;
}

h2, h3, h4, h5, h6 {
  font-family: "Trebuchet MS", sans-serif;
  color: <red:eval>self.app.rednode.get_first_value(resource(self.app.rednode.uri), BACKGROUND, "#900")</red:eval>;
  margin: 5px 10px;
  xpadding:     0px 10px;
}

p {
  margin: 5px 40px;
}

dl, ul {
  margin: 0px 40px;
}

body table {
  margin: 0px 40px;
}

body div {
  margin: 0px 40px;
}

body {
  margin-top: 0px;    
}    

dd {
  margin-bottom: 0.5em;
}

dt {
  font-weight: bold;
}

table.NAV {    
  background: #000;
  margin: 0px;
  color: #FFF;
  font-size: 10pt;
  font-weight: bold;
}

table.NAV A {
  color: #FFF;
  text-decoration: none;
}

table.NAV A:hover {
  color: #CCC;
}

A {
  color: <red:eval>self.app.rednode.get_first_value(resource(self.app.rednode.uri), LINK_COLOR, "#006")</red:eval>;
}

A:hover {
  color: <red:eval>self.app.rednode.get_first_value(resource(self.app.rednode.uri), LINK_HOVER, "#66C")</red:eval>;
}

    </red:facet>


    <red:facet name="_body" args="uri=None">
    <red:exec>
      uri = uri or resource(self.app.request.get_parameter('uri', None))
      uri = uri or resource(self.app.rednode.uri+self.app.request.get_path_info()[1:])
    </red:exec>

      <red:if test="self.visible(uri)">
        <red:exec>
          html = self.app.rednode.get_first_value(uri, HTML, None)
          comment = self.app.rednode.get_first_value(uri, COMMENT, None)
        </red:exec>

      <red:if test="comment">
        <h2>Introduction</h2>
        <p><red:eval encode="None">comment</red:eval></p>
      </red:if>

      <red:if test="html">
        <red:eval encode="None">html</red:eval>
      </red:if>


      <red:exec>
        lb = ListBuilder()
        self.app.rednode.visit(o(filter(lb.accept, self.visible)), (uri, LIST_LINK, None))
        links = lb.list
        links.sort(self.alpha_by_label)        
        last = len(links) - 1
      </red:exec>
      <red:if test="len(links)>0">
        <h2>List</h2>
        <dl>
      <red:for item="index" list="xrange(len(links))">
        <dt>
          <a href="{links[index]}"><red:eval>self.app.rednode.label(links[index])</red:eval></a>
        </dt>
        <dd>
          <red:eval>self.app.rednode.comment(links[index])</red:eval>
        </dd>
      </red:for>
        </dl>  
      </red:if>      

      <red:exec>self.app.apply()</red:exec>

      

      </red:if>  

      
    </red:facet>    
    
    <red:facet name="/robots.txt" content_type="text/plain">
User-agent: *
    </red:facet>    

    <red:facet name="login">
      <h2>Login</h2>
      <red:exec>self.authentication.login()</red:exec>
    </red:facet>  

    <red:facet name="create">
      <h2>Create User</h2>
      <red:exec>self.authentication.create()</red:exec>
    </red:facet>  

    <red:facet name="auth/">
      <h1>Authentication</h1>
      <red:exec>self.authentication.apply()</red:exec>
    </red:facet>

    <red:facet name="/redsite/editor">
      <red:exec>self.generic.apply()</red:exec>
    </red:facet>
    

  </red:module>
</red:code>
