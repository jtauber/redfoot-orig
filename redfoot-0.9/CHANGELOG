CHANGELOG

Changes between 0.9.4 and 0.9.5

 - **refactor of apps and the way servers are started by them**
 - added run_redpage and _load_redpage

 - generateURI now generates URI's that are 'further down' in the URI
   space -- giving the resource its own URI rather than 'just' an ID
   in the current 'document'

 - fixed cookie expires date format
 - changed session default max inactive time to 10 years

 - refactored the way Query objects take args (much simpler now)
 - refactored out lambdas that pull s and o from triple

 - Viewer/Editor/UI no longer have a path property as it is now /

 - optimized split_property a bit by adding a cache lookup
 - hard coded the rdf prefix (for sake of optimization)

 - fixes for JournalingStore (still experimental)
 - update no longer removes and re-adds properties who's values are
   unchanged
 - added SOURCE property to journal statements
 - JournalingStore no longer has TripleStore as a base
 - fixed up subject URI's used in Journal Store
 - fixed up timestamps used in Journal Store


Changes between 0.9.3 and 0.9.4
	
 - added 'copy' button to edit page
 - edit now adds required properties if they are not already present
 - first pass implementation of redpages
 - added experimental journaling store (JournalingStoreIO)
 - initial attempt at generating dot for graphviz
 - can now add properties to an unknown resource using edit
 - class list now lists typeless resources
 - changed menu names (distinction between abstract and external resources)

 - server now shuts down (more) cleanly
 - added support in bnh for content type of multipart/form-data
   (to allow file upload)
 - added method for parsing RDF from a stream
 - removed at most one rdf:RDF element constraint
 - visitResourcesByType will now visit resources whose type is an unknown class
 - all subjects can take the properties that RESOURCE can
 - added input method on StoreIO (mirroring output method)
 - edit can now take type; add just asks for URI
 - calling edit with no subject autogenerates a URI

 - converted many mixedCase names to _ style names
 - made some reasonably straight forward optimizations (largely moving stuff
   out of inner loops)
 - moved a bunch of bnh stuff into separate modules
 - added code in bnh to keep trying to bind to address
 - started adding exception handling code around parse
 - fixed bug in visitTransitiveSubTypes and visitPossibleValues
 - renamed visitSubjects to visit_subjects
 - removed unused gets
 - fixed up *Transitive* methods
 - refactored to use new query method; still have a few thoughts before we go
   nuts and convert everything over
 - added adapter method query
 - added visitSubjects subject for conv. and efficiency
 - added typelessResources() query
 - Serializer will now also work with no baseURI
 - encoding fixes
 - URI defaults to None so that output may be called without one
 - edit doesn't absolutize any more
 - can now delete empty properties of range LITERAL
 - refactored to use header and footer methods
 - fixed font-weight and size
 - added method to override getTypelessResources to only pay attention to
   local resources
 - moved the 'local in context of neighbourhood' methods to RedNode... else
   we were overriding the corresponding methods on local, which someone may
   care about
 - bug fix... query parameters to output were not being passed correctly
 - removed second menubar in view
 - factored out the if self.showNeighbours

Changes between 0.9.2 and 0.9.3

 - improved documentation
 - complete refactor of rdf library
	
 - rdf.const now houses RDF constants
 - rdf.literal now had methods for encoding/decoding literals
 - renamed property/value to predicate/object
 - changed a number of classes to mix via multiple inheritance rather than
   wrapping
	
 - changed class RDFParser to function parseRDF
 - refactored common parser handler code into HandlerBase class

 - Added support for cookies and sessions in BNH
 - Split server.py into server.py, servlet.py and receiver.py

 - added getRange, visitTypes, getPossibleProperties,
   getPossiblePropertiesForSubject methods to query
 - factored out common getFirst functionality from label and comment
 - reify no longer removes original triple
 - refactored code using get to use calls to visit
 - moved get method to query

 - serializer has new method for serializing statements that keeps track
   of subject start/end for you
 - fixed string index out of range bug in serializer

 - visit will now stop if None is not returned by callback function
 - refactored+documented visit function
 - removed put
 - refactored remove to use callback function
 - changed visitor classes to functions

 - Added autosave capability
 - output method now takes query arguments for what to output and is more
   efficent

 - factored out creation of handler from runServer
 - in baseui, moved creation of editor to getEditor method so that
   subclasses can override getEditor to create an editor of their liking

 - renamed StoreNode to RedNode
 - fixing some of the local / neighbourhood stuff

 - changed redserver to use new server interface
 - catch and dump exceptions while attempting to load
 - beginnings of code to support automatic reloading of handlers
 - factored out creation of handler from runServer
 - changed to python 2.0 method of getting the fully qualified domain
   name... as the 1.6 method in some instances would take a long time

 - added a test of new UI for picking resources
 - download RDF and view Triples now can take subject, predicate, object
   parameters
 - show/hide neighbour applies to Triples view too now
	
 - editor now uses getRange where possible
 - Now uses the new getPossibleProperties* methods on query
 - now alphabetically sort possible values for properties
 - fixed VALIGN=top typo on reify buttons
	
Changes between 0.9.1 and 0.9.2

 - fixed bug that was causing problems when trying to save when on the
   edit page
 - fixed Unknown Attribute property_num bug introduced just before 0.9.1
 - fixed string index out of range bug in serializer

 - added authentication to sample
 - added support for cookies and sessions

 - cleaned up handler interface 
 - refactored how parameters are accessed (no more [0]'s)
 - prefixed a number of methods and variables with _ to indicate they are
   private
 - changed a number of methods to mixed case for consistency
 - added a setHeader method on response -- headers where hardcoded before
 - replaced writer with response as writer predates and is redundant with
   response

 - moved creation of editor to getEditor method so that subclasses can
   override getEditor to create an editor of their liking

 - changed to python 2.0 method of getting the fully qualified domain
   name... as the 1.6 method in some instances would take a long time

Changes between 0.9.0 and 0.9.1	

 - numerous refactors
 - restructured directory hierarchy

 - gave menu bars labels and clarified some of the items
 - added sample custom UI
 - list of resources by class now only shows classes with instances
 - server now takes -P option to pass in path from server root to RDF
 - finished add(type) support in editor

 - fixed bug causing server to hang under load	
 - BNH now has example and test case for running server
 - BNH now has better exception handling
 - BNH now using thread per handler instead of thread per request
 - refined BNH's handler interface
