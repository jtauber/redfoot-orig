<r:module name="viewer" xmlns:r="http://redfoot.sourceforge.net/2001/01/">

from rdf.query import QueryStore
from rdf.literal import literal, un_literal, is_literal
from rdf.const import *

<r:class name="Viewer">

def __init__(self, rednode):
    self.rednode = rednode
    self.showNeighbours = 0

def handle_request(self, request, response):
    self.response = response

    parameters = request.get_parameters()        
    path_info = request.get_path_info()

    if path_info == "/classList":
        self.classList()
    elif path_info == "/triples":
        s = parameters['subject']
        if s=="": s=None
        p = parameters['predicate']
        if p=="": p=None
        o = parameters['object']
        if o=="": o=None
        self.triples(s,p,o)
    elif path_info == "/css":
        self.css()
    elif path_info == "/view":
        self.view(parameters['uri'])
    elif path_info == "/test":
        self.test(parameters['search'])
    elif path_info == "/graphViz":
        self.graphViz()
    else:
        self.response.write("unknown PATH of '%s'" % path_info)

def getNodeInScope(self):
    if self.showNeighbours==1:
        return self.rednode.neighbourhood
    else:
        return self.rednode

def css(self):
    self.response.write("body { color: blue }")

def menuBar(self):
    self.response.write("""
        <P CLASS="MENUBAR"><B>VIEW</B>
         : <A HREF="classList">Resources by Class</A>
         | <A HREF="fullsubclass">Full Subclass Tree</A>
         | <A HREF="subclass">Partial Subclass Tree</A>
         | <A HREF=".">HOME</A>
         | <A HREF="triples">Triples</A>
        </P>
    """)

def mainPage(self):
    self.subclass(RESOURCE, 0)

def header(self, title):
    self.response.write("""
        <HTML>
          <HEAD>
            <TITLE>ReDFoot: %s</TITLE>
            <LINK REL="STYLESHEET" HREF="css"/>
          </HEAD>
          <BODY>
            <H1>RedFoot</H1>
    """ % title)
    self.menuBar()
    self.response.write("""
            <H2>%s</H2>
    """ % title)

def footer(self):
    self.response.write("""
          </BODY>
        </HTML>
    """)

def classList(self):
    self.header("Resources by Class")
    self.response.write("""
        <DIV CLASS="box">
          <DL>
    """)

    node = self.getNodeInScope()
    node.visitResourcesByType(self.displayClass, self.displayResource)

    firstTypeless = 1

    for resource in node.getTypelessResources():
        if firstTypeless==1:
            self.response.write("""<DT>Typeless</DT>""")
            firstTypeless=0
        self.displayResource(resource)

    self.response.write("""
          </DL>
        </DIV>
    """)
    self.footer()

<r:response name="/fullsubclass">
<r:exec>
root = request.get_parameters()['uri']
if root == "":
    root = RESOURCE
self.display_subclass(request, response, root)
</r:exec>
</r:response>

<r:response name="/subclass">
<r:exec>
root = request.get_parameters()['uri']
if root == "":
    root = RESOURCE
self.display_subclass(request, response, root, 0)
</r:exec>
</r:response>

<r:response name="display_subclass" args="root, recurse=1">
<r:exec>self.header("Subclass View")</r:exec>
<DIV CLASS="box">
<r:exec>self.rednode.visitParentTypes(self.displayParent, root)</r:exec>
<DL>
<r:exec>
node = self.getNodeInScope()
node.visitSubclasses(self.displaySCClass, self.displaySCResource, root, recurse=recurse)
</r:exec>
</DL>
</DIV>
<r:exec>self.footer()</r:exec>
</r:response>

def resourceHeader(self, subject):
    self.response.write("""
        <H3>%s</H3>
        <P>%s</P>
    """ % (self.encodeCharacterData(self.rednode.label(subject)), subject))

def view(self, subject):
    self.header("View")
    self.resourceHeader(subject)
    self.response.write("""
        <TABLE>
    """)

    if self.rednode.isKnownResource(subject):
        self.rednode.visitPredicateObjectPairsForSubject(self.displayPropertyValue, subject)
    else:
        self.response.write("<TR><TD>Resource not known of directly</TD></TR>")
    self.rednode.visitReifiedStatementsAboutSubject(self.displayReifiedStatements, subject)

    self.response.write("""
        </TABLE>
    """)
    self.footer()

def displayClass(self, klass):
    self.response.write("""
    <DT>%s</DT>
    """ % self.encodeCharacterData(self.rednode.label(klass)))

def displayResource(self, resource):
    self.response.write("""
    <DD>%s<BR></DD>
    """ % self.link(resource))

def displayParent(self, resource):
    self.response.write("""<A HREF="subclass?uri=%s" TITLE="%s">%s</A>"""  % (self.encodeURI(resource), self.encodeAttributeValue(self.rednode.comment(resource)), self.encodeCharacterData(self.rednode.label(resource))))

# TODO: rewrite to use lists
def displaySCClass(self, klass, depth, recurse):
    self.response.write(3*depth*"&nbsp;")

    if recurse==0:
        self.response.write("""<A HREF="subclass?uri=%s" TITLE="%s">""" % (self.encodeURI(klass), self.encodeAttributeValue(self.rednode.comment(klass))))

    self.response.write("<B>%s</B>" % self.encodeCharacterData(self.rednode.label(klass)))

    if recurse==0:
        self.response.write("</A>")

    self.response.write("<BR>")

# TODO: rewrite to use lists
def displaySCResource(self, resource, depth, recurse):
    self.response.write(3*(depth+1)*"&nbsp;")
    self.response.write(self.link(resource)+"<BR>")

def link(self, resource):
    return """<A HREF="view?uri=%s" TITLE="%s">%s</A>"""  % (self.encodeURI(resource),
                                                             self.encodeAttributeValue(self.rednode.comment(resource)),
                                                             self.encodeCharacterData(self.rednode.label(resource)))

def displayPropertyValue(self, property, value):
    propertyDisplay = self.link(property)
    if len(value)<1:
        valueDisplay = ""
    elif is_literal(value):
        valueDisplay = self.encodeCharacterData(un_literal(value))
    else:
        valueDisplay = self.link(value)
    self.response.write("""
    <TR><TD>%s</TD><TD></TD><TD COLSPAN="2">%s</TD></TR>
    """ % (propertyDisplay, valueDisplay))

def displayReifiedStatements(self, subject, predicate, object):
    propertyDisplay = self.link(predicate)
    if len(object)<1:
        valueDisplay = ""
    elif is_literal(object):
        valueDisplay = self.encodeCharacterData(un_literal(object))
    else:
        valueDisplay = self.link(object)
    self.response.write("""
    <TR CLASS="REIFIED"><TD>%s</TD><TD></TD><TD>%s</TD>
    <TD COLSPAN="3">%s<BR>""" % (propertyDisplay, valueDisplay, self.link(subject)))
    self.rednode.visitPredicateObjectPairsForSubject(self.displayReifiedStatementPropertyValue, subject)
    self.response.write("""
    </TD></TR>""")

def displayReifiedStatementPropertyValue(self, property, value):
    if property==TYPE:
        return
    if property==SUBJECT:
        return
    if property==PREDICATE:
        return
    if property==OBJECT:
        return
    propertyDisplay = self.link(property)
    if len(value)<1:
        valueDisplay = ""
    if is_literal(value):
        valueDisplay = self.encodeCharacterData(un_literal(value))
    else:
        valueDisplay = self.link(value)
    self.response.write("""
    %s: %s<BR>
    """ % (propertyDisplay, valueDisplay))

def encodeURI(self, s, safe='/'):
    import string
    always_safe = string.letters + string.digits + ' _,.-'
    safe = always_safe + safe
    res = []
    for c in s:
        if c not in safe:
            res.append('%%%02x'%ord(c))
        else:
            if c==' ':
                res.append('+')
            else:
                res.append(c)
    return string.joinfields(res, '')

def encodeAttributeValue(self, s):
    import string
    s = string.join(string.split(s, '&'), '&amp;')
    s = string.join(string.split(s, '"'), '&quot;')
    return s

def encodeCharacterData(self, s):
    import string
    s = string.join(string.split(s, '&'), '&amp;')
    s = string.join(string.split(s, '<'), '&lt;')
    return s

<r:response name="/">
<r:exec>
response.setHeader("Content-Type", "text/xml")
parameters = request.get_parameters()
s = parameters['subject']
if s=="": s=None
p = parameters['predicate']
if p=="": p=None
o = parameters['object']
if o=="": o=None
node = self.getNodeInScope()
node.output(response, None, s, p, o)
</r:exec>
</r:reponse>

<r:response name="/journal">
<r:exec>
response.setHeader("Content-Type", "text/xml")
parameters = request.get_parameters()
s = parameters['subject']
if s=="": s=None
p = parameters['predicate']
if p=="": p=None
o = parameters['object']
if o=="": o=None
node = self.rednode.local.journal
node.output(response, None, s, p, o)
</r:exec>
</r:response>

def triples(self, subject=None, predicate=None, object=None):
    self.header("Triples")
    self.response.write("""
        <TABLE>
    """)

    def triple(s, p, o, write=self.response.write):            
        write("""
          <TR><TD>%s</TD><TD>%s</TD><TD>%s</TD></TR>
        """ % (s, p, o))
    if self.showNeighbours==1:
        self.rednode.neighbourhood.visit(triple, subject, predicate, object)
    else:
        self.rednode.local.visit(triple, subject, predicate, object)

    self.response.write("""
        </TABLE>
    """)
    self.footer()

def test(self, search):
    self.header("Test")
    self.response.write("""
        <INPUT TYPE="TEXT" SIZE="60" NAME="a" onChange="document.all.b.value=document.all.a.value">
        <SELECT NAME="b" onChange="document.all.a.value=document.all.b.value">
          <OPTION value="">Select a resource</OPTION>
    """)
    for s in subjects:
        self.response.write("""
          <OPTION VALUE="%s">%s</OPTION>
        """ % (s, self.rednode.label(s)))
    self.response.write("""
        </SELECT>
        <FORM ACTION="test" METHOD="GET">
          <P>Search for <INPUT NAME="search" TYPE="TEXT" VALUE="%s" SIZE="60"><INPUT TYPE="submit">
        </FORM>
    """ % search)
    if search != "":
        import string
        upper_search = string.upper(search)
        self.response.write("""<UL>""")
        for s in subjects:
            upper_uri = string.upper(s)
            upper_label = string.upper(self.rednode.label(s))
            upper_comment = string.upper(self.rednode.comment(s))
            if (string.find(upper_uri,upper_search)!=-1) or \
               (string.find(upper_label, upper_search)!=-1):
                   self.response.write("""
                     <LI><A HREF="javascript:document.all.a.value='%s'">%s</A></LI>
                   """ % (s, self.rednode.label(s)))
    self.response.write("""</UL>""")
    self.footer()

def graphViz(self):
    self.response.write("""
        digraph G {
    """)
    def callback(s,p,o,response=self.response, node=self.rednode):
        response.write("""
            "%s" -> "%s" [ label="%s" ];
        """ % (node.label(s), node.label(o), node.label(p)))
    self.getNodeInScope().visit(callback, None, None, None)
    self.response.write("""
        }
    """)

</r:class>

</r:module>
