<r:module name="rss" xmlns:r="http://redfoot.sourceforge.net/2001/01/">

from rdf.const import *

RSS_ITEM = "http://purl.org/rss/1.0/item"
RSS_TITLE = "http://purl.org/rss/1.0/title"

# TODO: ??
# RSS_DESCRIPTION = "http://purl.org/rss/1.0/description"
RSS_DESCRIPTION = "http://purl.org/dc/elements/1.1/description"

RSS_LINK = "http://purl.org/rss/1.0/link"

from redfoot.util import *


<r:class name="RSS">

def __init__(self, node):

    def toRelativeURL(path):
        import sys
        from os.path import join, dirname
        from urllib import pathname2url
        print __name__
        libDir = dirname(sys.modules["redfoot.modules.rss"].__file__)
        return pathname2url(join(libDir, path))

    node.connectTo(toRelativeURL("rssSchema.rdf"), None)
    node.connectTo(toRelativeURL("dces.xml"), None)    


def load_rss(self, request, response):
    if hasattr(self, 'rss_store') and self.rss_store:
        self.rednode.neighbours.stores.removeStore(self.rss_store)
        self.rss_store = None
    store = Local()
    store.load(request.get_parameters()['url'], None)
    self.rednode.neighbours.stores.addStore(store)
    self.rss_store = store


def rss(self, request, response):
    triples = self.rednode.get(None, TYPE, RSS_ITEM)
    self.list(request, response, triples, self.rss_row)


<r:response name="rss_row" args="triple row">
<dl class="rss_item_{row%2}">
  <dt>
      <r:eval>get_property_value(self.rednode, triple[0], RSS_TITLE, '')</r:eval>
  </dt>
  <dd>
    <div>
      <r:eval>get_property_value(self.rednode, triple[0], RSS_DESCRIPTION, '')</r:eval>
    </div>
    <div>
      <a href="{get_property_value(self.rednode, triple[0], RSS_LINK, '')}">Read Story</a>
    </div>
  </dd>
</dl>
</r:response>

</r:class>

</r:module>
