$Header$


CREATING CUSTOM UI IN REDFOOT

    Redfoot is a framework for building web applications and sites
    that are driven by RDF and are possibly peer-to-peer.

INTRODUCTION

    Typically, an application or site will consist of:
        - Redfoot itself
        - Custom UI (written in Python)
        - RDF data

    This manual describes how to build the custom UI of your
    Redfoot-based application.

    If all you are interested in doing is viewing and editing RDF, you
    don't need any custom UI. Redfoot includes a generic,
    browser-based viewer and editor.

BASICS

    A custom UI has two components:
        - a subclass of BaseUI (in module redfoot.baseUI)
        - a script that invokes a RedServer

STARTUP SCRIPT

    A basic start up script looks like the following:

       from redfoot.server import RedServer
       server = RedServer(('', port))
       server.setHandler(MyUI())
       server.start()
       server.keepRunning()
            
    where MyUI() is the subclass of BaseUI to use for the custom UI

CREATING THE REDNODE

    Each Redfoot has, at its heart, a RedNode. This is typically
    either created in the constructor of the UI class or created in
    the startup script and passed to the UI class.

    Creating the RedNode is as simple as:

        from redfoot.rednode import RedNode
	redNode = RedNode()
	redNode.local.load(location, uri)

THE UI CLASS

    The core part of a custom UI is the UI class which is often
    a subclass of BaseUI in module redfoot.baseUI (to provide some
    useful utility functions)

    The only method that the subclass must implement is

        handleRequest(request,response)

    Typically this method will grab the parameters and path_info via

        parameters = request.getParameters()
        path_info = request.getPathInfo()

    and then will serve up the appropriate page given the value of
    path_info and the parameters.

RETURNING A CONSTRUCTED PAGE

    To generate a page, simply use

        response.write("...")

    to append to the response.

TODO: how does BNH know to flush the response stream?

PROVIDING HTTP TO THE UNDERLYING REDFOOT

    In most cases, the custom UI should pass URIs referring to the
    underlying Redfoot straight through to that Redfoot. To achieve
    this, the handleRequest method should include something along
    the lines of:

        if self.path_match(path_info):
            self.call_editor(request, response)

    path_match is a boolean function that determines whether the
    given path_info refers to the underlying Redfoot or not

    call_editor passes the handling of the request to the underlying
    Redfoot

    TODO: should this function be called call_editor or something
          like call_redfoot

TODO

$Log$
Revision 1.2  2000/12/08 06:31:43  jtauber
updated with more of how things now work

Revision 1.1  2000/12/04 03:27:01  jtauber
first pass at documentation on creating custom UI







